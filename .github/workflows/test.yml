# Unique name for this workflow
name: Deploy integration branch to integration and staging/uat orgs

# Definition when the workflow should run
on:
    push:
      branches: [ staging ]
      paths:
        - 'force-app/**'
            

# Jobs to be executed
jobs:
    deploy-branch-to-int-and-staging-orgs:
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            - name: Ensure node v20.9.0 or greater
              uses: actions/setup-node@v4
              with:
                node-version: '>=20.9.0'
            - name: Ensure java v11 or greater
              uses: actions/setup-java@v4
              with:
                java-version: '>=11'
                distribution: 'zulu'
            - name: Ensure python v3.10 or greater
              uses: actions/setup-python@v5
              with:
                python-version: '>=3.10'

            # Install Salesforce CLI
            - name: Install Salesforce CLI
              run: npm install -g @salesforce/cli@latest

            # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sf plugins install sfdx-git-delta
                  sf plugins 

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v5
              with:
                fetch-depth: 0

            # Store secret for both otgs
            - name: 'Populate auth file with SFDX_URL secret of the integration and staging orgs'
              shell: bash
              env:
                   SF_AUTH_KEY: ${{ secrets.SF_JWT_KEY }}
                   SF_AUTH_CLIENT: ${{ secrets.SF_JWT_CLIENT }}
                   SF_AUTH_USERNAME: ${{ secrets.SF_JWT_USERNAME }}

              run: |
                  printf "%s" "$SF_AUTH_KEY" > ./SFDX_INTEGRATION_JWT.txt
                  printf "%s" "$SF_AUTH_CLIENT"  > ./SFDX_INTEGRATION_JWT_CLIENT.txt
                  printf "%s" "$SF_AUTH_USERNAME" > ./SFDX_INTEGRATION_JWT_USERNAME.txt
            # Create delta packages for new, modified, or deleted metadata
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: |
                mkdir changed-sources
                sf sgd source delta \
                --to "HEAD" \
                --from "HEAD^" \
                --output "changed-sources/" \
                --generate-delta \
                --source "force-app/"

            # Authenticate to Staging Org
            - name: 'Authenticate to Staging Org'
              run: sf org login jwt --username ./SFDX_INTEGRATION_JWT_CLIENT.txt --jwt-key-file ./SFDX_INTEGRATION_JWT.txt --client-id ./SFDX_INTEGRATION_JWT_CLIENT.txt --instance-url https://test.salesforce.com --json 

            # Deploy source to Staging org
            - name: 'Deploy the entire branch to Staging org'
              run: |
                echo "Deploying source code to Staging org..."
                sf project deploy start \
                --source-dir "changed-sources/force-app" \
                --test-level RunLocalTests \
                --json

            # Deploy destructive changes (if any) to Staging org
            - name: 'Deploy destructive changes (if any) to Staging org'
              if: ${{ hashFiles('changed-sources/destructiveChanges/destructiveChanges.xml') != '' }}
              run: |
                echo "Found destructive changes. Deploying..."
                sf project deploy start \
                --metadata-dir "changed-sources/destructiveChanges" \
                --check-only \
                --ignore-warnings
                --json > prod-validate.json

                  # Try common keys in case of CLI version differences
                DEPLOY_ID=$(jq -r '.result.id // .result.deploymentId // .id // empty' prod-validate.json)
                if [ -z "$DEPLOY_ID" ]; then
                  echo "Could not find deploy id in JSON:"; cat prod-validate.json; exit 1
                fi
                echo "deploy_id=$DEPLOY_ID"
              continue-on-error: false
          
            # No destructive changes found
            - name: 'Skip destructive deploy if no changes'
              if: ${{ hashFiles('changed-sources/destructiveChanges/destructiveChanges.xml') == '' }}
              run: echo "No destructiveChanges.xml found â€” skipping destructive deployment."