# This workflow automates the creation of a "release" pull request when a feature PR is merged into the 'staging' branch.
# It calculates the precise changes (the delta) between the feature branch and 'main', creates a new release branch
# from 'main', applies the delta to it, and opens a new PR from the release branch to 'main'.
name: Build release branch (on PR merged to staging)

on:
  pull_request:
    types: [closed]
    branches: [staging]

# Ensures only one promotion workflow runs at a time. If another PR is merged
# while one is running, the second will queue until the first is complete.
# This prevents race conditions with creating/pushing release branches.
concurrency:
  group: promote-to-release
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write

jobs:
  promote-feature-branch:
    name: Promote feature branch -> release branch
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'staging' }}
    env:
      # This is a placeholder for the validation org URL.
      SF_LOGIN_URL_PROD: "https://test.salesforce.com"
    outputs:
      release_branch: ${{ steps.create_branch.outputs.release_branch }}
      release_pr_number: ${{ steps.open_pr.outputs.release_pr_number }}

    steps:
      # Step 1: Check out the repository.
      - name: Checkout full repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false

      # Step 2: Store key information from the merged PR event for use in later steps.
      - name: Set PR context variables
        id: prinfo
        run: |
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "PR_TITLE<<EOF" >> $GITHUB_ENV
          echo "${{ github.event.pull_request.title }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "PR_HEAD_REF=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
          echo "PR_HEAD_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          echo "PR_HEAD_OWNER=${{ github.event.pull_request.head.repo.owner.login }}" >> $GITHUB_ENV
          echo "PR_HEAD_REPO=${{ github.event.pull_request.head.repo.name }}" >> $GITHUB_ENV

      # Step 3: Install all necessary command-line tools for the job.
      - name: Install requirements (sf CLI, sfdx-git-delta, jq, gh)
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq git curl ca-certificates rsync
          npm i -g @salesforce/cli@latest
          echo y | sf plugins install sfdx-git-delta || true
          # Install GitHub CLI
          if ! command -v gh >/dev/null 2>&1; then
            (type -p wget >/dev/null || (sudo apt-get update && sudo apt-get install wget -y)) && \
            sudo mkdir -p -m 755 /etc/apt/keyrings && \
            wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null && \
            sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg && \
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null && \
            sudo apt-get update && \
            sudo apt-get install gh -y
          fi

      - name: Ensure Java 11+
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'zulu'

      # Step 4: Configure Git remote and fetch the 'main' branch.
      - name: Fetch origin/main and prepare refs
        run: |
          set -euo pipefail
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          git fetch --no-tags origin main:refs/remotes/origin/main
          git rev-parse --verify origin/main

      # Step 5: Fetch the head of the feature branch, including support for PRs from forks.
      - name: Fetch feature branch (supports forks)
        id: fetch_feature
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          OWNER="${PR_HEAD_OWNER}"
          REPONAME="${PR_HEAD_REPO}"
          BRANCH="${PR_HEAD_REF}"
          PR_NUM="${PR_NUMBER}"
          echo "Fetching '${BRANCH}' from ${OWNER}/${REPONAME} ..."

          if [ "${OWNER}/${REPONAME}" = "${{ github.repository }}" ]; then
            git fetch origin "refs/pull/${PR_NUM}/head:refs/remotes/pr/${BRANCH}"
          else
            git remote remove fork 2>/dev/null || true
            git remote add fork "https://x-access-token:${GH_TOKEN}@github.com/${OWNER}/${REPONAME}.git"
            git fetch origin "refs/pull/${PR_NUM}/head:refs/remotes/pr/${BRANCH}"
          fi

          if git show-ref --verify --quiet "refs/remotes/pr/${BRANCH}"; then
            echo "FETCH_REF=refs/remotes/pr/${BRANCH}" >> $GITHUB_ENV
          else
            echo "Could not fetch branch by ref; falling back to PR head SHA ${PR_HEAD_SHA}"
            echo "FETCH_REF=${PR_HEAD_SHA}" >> $GITHUB_ENV
          fi

      # Step 6: Generate the delta package using sfdx-git-delta.
      - name: Generate metadata delta (origin/main -> feature)
        id: gen_delta
        run: |
          set -euo pipefail
          TO_REF="${FETCH_REF:-${PR_HEAD_SHA}}"
          echo "Generating delta: origin/main -> ${TO_REF}"
          mkdir -p changed-sources
          sf sgd source delta \
            --from "origin/main" \
            --to "${TO_REF}" \
            --output "changed-sources" \
            --generate-delta \
            --source "force-app/"

          # Check if there are any additive changes (in force-app) or destructive changes.
          if [ -n "$(ls -A changed-sources/force-app/ || true)" ] || \
             [ -f "changed-sources/destructiveChanges/destructiveChanges.xml" ] || \
             [ -f "changed-sources/destructiveChangesPost/destructiveChanges.xml" ]; then
            echo "no_changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "no_changes=true" >> "$GITHUB_OUTPUT"
          fi

      # Step 7: If the delta is empty, abort the workflow gracefully.
      - name: Abort if no metadata changes
        if: steps.gen_delta.outputs.no_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BODY="âœ… No deployable metadata detected between \`main\` and feature branch \`${PR_HEAD_REF}\` (PR #${PR_NUMBER}). Nothing to promote."
          gh pr comment "${PR_NUMBER}" --body "$BODY"

      # Step 8: Create the release branch, starting from the latest 'main'.
      - name: Create release branch from origin/main
        if: steps.gen_delta.outputs.no_changes == 'false'
        id: create_branch
        run: |
          set -euo pipefail
          SHORTSHA=$(echo "${PR_HEAD_SHA}" | cut -c1-7)
          RELEASE_BRANCH="release/pr-${PR_NUMBER}-${SHORTSHA}"
          git checkout -b "${RELEASE_BRANCH}" origin/main
          echo "RELEASE_BRANCH=${RELEASE_BRANCH}" >> $GITHUB_ENV
          echo "release_branch=${RELEASE_BRANCH}" >> $GITHUB_OUTPUT

      # Step 9 (FIXED): Apply changes and generate manifests
      - name: Apply feature changes to release branch + generate manifests
        if: steps.gen_delta.outputs.no_changes == 'false'
        run: |
          set -euo pipefail
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name  "github-actions[bot]"

          TO_REF="${FETCH_REF:-${PR_HEAD_SHA}}"

          # -------- A) Bring in adds/edits; remove deletions --------
          while IFS= read -r path; do
            [ -n "$path" ] || continue
            git checkout "$TO_REF" -- "$path"
          done < <(git diff --name-only --diff-filter=AM origin/main "$TO_REF" -- "force-app/**")

          while IFS= read -r path; do
            [ -n "$path" ] || continue
            git rm -f -- "$path" || true
          done < <(git diff --name-only --diff-filter=D origin/main "$TO_REF" -- "force-app/**")

          # -------- B) Create branch-scoped manifest(s) --------
          BRANCH_RAW="${PR_HEAD_REF}"
          BRANCH_SAFE="$(printf "%s" "$BRANCH_RAW" | sed -E 's/[^A-Za-z0-9._-]+/-/g')"
          mkdir -p manifest/branches

          # 1) Regular package manifest
          PKG_PATH="manifest/branches/${BRANCH_SAFE}Package.xml"
          if [ -f "changed-sources/package/package.xml" ]; then
            cp "changed-sources/package/package.xml" "$PKG_PATH"
          else
            API_VER="$(jq -r '.sourceApiVersion // empty' sfdx-project.json 2>/dev/null || true)"
            API_VER="${API_VER:-60.0}"
            # Use echo to avoid here-doc issues
            echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
              <Package xmlns=\"http://soap.sforce.com/2006/04/metadata\">
                <version>${API_VER}</version>
              </Package>" > "$PKG_PATH"
          fi

          # 2) Destructive manifest (if necessary)
          PRE_XML="changed-sources/destructiveChanges/destructiveChanges.xml"
          POST_XML="changed-sources/destructiveChangesPost/destructiveChanges.xml"
          if [ -f "$PRE_XML" ] || [ -f "$POST_XML" ]; then
            DEST_PATH="manifest/branches/${BRANCH_SAFE}Package-destructive.xml"
            # Call the external python script, passing the destination path
            echo "Found destructive changes, generating merged manifest..."
            export DEST_PATH
            python3 .github/scripts/merge_destructive.py
          fi

          # -------- C) Stage changes --------
          git add -A -- "force-app" "manifest/branches"

          # -------- D) Commit if there are changes --------
          if git diff --cached --quiet; then
            echo "Release creation aborted: no changes to commit."
            exit 0
          fi

          git commit -m "release: promote PR #${PR_NUMBER} (${PR_HEAD_REF} -> main) [automated]"
          git push origin "HEAD:${RELEASE_BRANCH}"

      # Step 10: Open the pull request from the new release branch to main.
      - name: Open PR from release branch into main
        if: steps.gen_delta.outputs.no_changes == 'false'
        id: open_pr
        uses: actions/github-script@v7
        env:
          REL_BRANCH: ${{ env.RELEASE_BRANCH }}
        with:
          script: |
            // Helper function to poll for the branch's existence after the push.
            const poll = async (fn, { interval, timeout }) => {
              const start = Date.now();
              while (true) {
                try {
                  return await fn(); // Attempt to resolve the function
                } catch (e) {
                  if (Date.now() - start > timeout) {
                    core.error(`Polling timed out after ${timeout}ms. Last error: ${e.message}`);
                    throw e; // Rerethrow the last error
                  }
                  core.info(`Check for branch failed, retrying in ${interval}ms...`);
                  await new Promise(resolve => setTimeout(resolve, interval));
                }
              }
            };

            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const branch = (process.env.REL_BRANCH || "").trim();
            if (!branch) {
              core.setFailed("RELEASE_BRANCH is empty or not set.");
              return;
            }

            // Verify the branch exists on the remote using polling
            try {
              await poll(
                () => github.rest.git.getRef({ owner, repo, ref: `heads/${branch}` }),
                { interval: 5000, timeout: 30000 } // Poll every 5s for 30s
              );
              core.info(`Found remote branch 'heads/${branch}' after polling.`);
            } catch (e) {
              core.setFailed(`Remote branch 'heads/${branch}' not found even after polling. Did 'git push' succeed? ${e.message}`);
              return;
            }

            // Reuse an existing open PR if one is found.
            const base = "main";
            const { data: prs } = await github.rest.pulls.list({ owner, repo, state: "open", head: `${owner}:${branch}`, base, per_page: 1 });
            if (prs.length > 0) {
              core.info(`Release PR already exists: #${prs[0].number}`);
              core.setOutput("release_pr_number", prs[0].number.toString());
              core.setOutput("release_pr_url", prs[0].html_url);
              return;
            }

            // Create the PR
            const title = `[release] Promote PR #${process.env.PR_NUMBER} -> main: ${process.env.PR_TITLE}`;
            const body  = `Automated release PR to promote feature from staging PR #${process.env.PR_NUMBER}.`;

            try {
              const { data: pr } = await github.rest.pulls.create({ owner, repo, head: branch, base, title, body });
              core.setOutput("release_pr_number", pr.number.toString());
              core.setOutput("release_pr_url", pr.html_url);
              core.info(`Created release PR #${pr.number}`);
            } catch (e) {
              core.setFailed(`Failed to create release PR: ${e.message}`);
            }

      # Step 11: Post a comment back on the original feature PR with a link to the new release PR.
      - name: Comment on original staging PR about release PR
        if: steps.gen_delta.outputs.no_changes == 'false' && always() && steps.open_pr.outputs.release_pr_number
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_PR_URL=${{ steps.open_pr.outputs.release_pr_url }}
          BODY="âœ… Automated release PR created: ${RELEASE_PR_URL}"
          gh pr comment "${PR_NUMBER}" --body "$BODY"

