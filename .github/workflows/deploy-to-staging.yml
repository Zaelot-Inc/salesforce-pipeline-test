# Unique name for this workflow
name: Deploy integration branch to integration and staging/uat orgs

on:
    push:
      branches: [ staging ]
      paths:
        - 'force-app/**'
            

# Jobs to be executed
jobs:
  deploy-branch-to-staging-org:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - name: Ensure node v20.9.0 or greater
        uses: actions/setup-node@v4
        with:
          node-version: '>=20.9.0'
          
      - name: Ensure java v11 or greater
        uses: actions/setup-java@v4
        with:
          java-version: '>=11'
          distribution: 'zulu'

      - name: Ensure python v3.10 or greater
        uses: actions/setup-python@v5
        with:
          python-version: '>=3.10'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Install Salesforce CLI
      - name: Install Salesforce CLI
        run: npm install -g @salesforce/cli@latest

      # install sfdx-git-delta plugin - https://github.com/scolladon/sfdx-git-delta
      - name: Installing sfdx git delta
        run: |
          echo y | sf plugins install sfdx-git-delta
          sf plugins

      # Checkout the source code
      - name: Checkout source code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # Write JWT private key to file (safe)
      - name: Populate auth file with SF_JWT secret of the staging org
        shell: bash
        env:
          SF_AUTH_KEY: ${{ secrets.SF_JWT_KEY }}
        run: |
          umask 177
          printf "%s" "$SF_AUTH_KEY" > ./SFDX_INTEGRATION_JWT.key

      # Create delta packages for new, modified, or deleted metadata
      - name: Create delta packages for new, modified or deleted metadata
        run: |
          mkdir -p changed-sources
          sf sgd source delta \
            --to "HEAD" \
            --from "HEAD^" \
            --output "changed-sources/" \
            --generate-delta \
            --source "force-app/"

      # Authenticate to Staging Org (JWT)
      - name: Authenticate to Staging Org
        env:
          SF_AUTH_CLIENT:   ${{ secrets.SF_JWT_CLIENT }}     # Connected App Consumer Key
          SF_AUTH_USERNAME: ${{ secrets.SF_JWT_USERNAME }}   # Username in target sandbox
        run: |
          sf org login jwt \
            --username "$SF_AUTH_USERNAME" \
            --jwt-key-file ./SFDX_INTEGRATION_JWT.key \
            --client-id "$SF_AUTH_CLIENT" \
            --instance-url https://test.salesforce.com \
            --json --set-default

      # Deploy source to Staging org (SAVE JSON)
      - name: Deploy to Staging
        run: |
          echo "Deploying source code to Staging org..."
          sf project deploy start \
            --source-dir "changed-sources/force-app" \
            --test-level RunLocalTests \
            --wait 120 \
            --json > staging-deploy.json
          echo "Wrote staging-deploy.json"

      - name: Show Staging Deploy Results
        if: always() # This makes sure the step runs even if the previous one fails
        run: |
          cat staging-deploy.json
      # Summarize Apex failures -> GitHub Annotations (and fail job)
      - name: Summarize Apex test failures (annotations)
        if: always()
        shell: bash
        run: |
          file="staging-deploy.json"
          if [ ! -s "$file" ]; then
            echo "::warning title=No JSON::staging-deploy.json not found or empty"
            exit 0
          fi
          fails_json=$(jq '.result.details.runTestResult.failures // []' "$file")
          count=$(echo "$fails_json" | jq 'length')
          echo "fail_count=$count" >> $GITHUB_ENV
          if [[ "$count" -gt 0 ]]; then
            echo "Found $count failing tests"
            echo "$fails_json" | jq -r '.[] | "\(.name).\(.methodName)|\(.message)|\(.stackTrace // "")"' | \
            while IFS='|' read -r id msg stack; do
              echo "::error title=Apex test failed: $id::$(printf "%s\n%s" "$msg" "$stack")"
            done
          else
            echo "No Apex test failures ðŸŽ‰"
          fi

      
      # Upload JSON artifacts (optional, helps debugging)
      - name: Upload JSON results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: staging-deploy-json
          path: |
            staging-deploy.json


   