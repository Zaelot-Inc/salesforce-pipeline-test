name: Salesforce Code Analyzer Workflow
on:
  pull_request:
    branches: [ staging, main]
    types: [opened, synchronize, ready_for_review]

jobs: 
  salesforce-code-analyzer-workflow:
    permissions:
      pull-requests: write # Grants permission to create a pull request review. Only necessary if running against pull requests.
      contents: read # Grants permission to check out the repository. Only necessary for private repos.
      actions: read # Grants permission to read the in-progress actions. Only necessary for private repos.
    runs-on: ubuntu-latest
    steps:
      - name: Check PR is Draft
        id: check_draft
        if: github.event.pull_request.draft == false
        run: echo "is_draft=true" >> "$GITHUB_OUTPUT"
      - name: Check out files
        uses: actions/checkout@v4
        with:
          # Needed so we can diff against the PR base
          fetch-depth: 0
      # 1) Collect changed files in the PR
      - uses: actions/github-script@v7
        id: changed
        with:
          script: |
            echo "${{ steps.check_draft.outputs.is_draft }}""
            const pr = context.payload.pull_request;
            if (!pr) { core.setOutput('any_changed','false'); return; }

            const files = await github.paginate(
              github.rest.pulls.listFiles,
              { owner: context.repo.owner, repo: context.repo.repo, pull_number: pr.number, per_page: 100 }
            );

            const keep = files
              .filter(f => f.status !== 'removed' && 
                      (f.filename.endsWith('.html') ||
                       f.filename.endsWith('.js') ||
                       f.filename.endsWith('.css') ||
                       f.filename.endsWith('.cls') ||
                       f.filename.endsWith('.trigger') ||
                       f.filename.endsWith('.xml')
                      ))     // exclude deletions
              .map(f => f.filename);                   // API already gives the new path on renames
            console.log(keep);
            core.setOutput('any_changed', String(keep.length > 0));
            core.setOutput('files_nl', keep.join('\n'));

      # 2) Short-circuit if nothing relevant changed
      - name: No relevant changes
        if:  steps.check_draft.outputs.is_draft != 'true' && steps.changed.outputs.any_changed == 'false'
        run: echo "No Apex/LWC/JS changes â€” skipping." && exit 0

      # 3) Save and split the list (avoids overlong commands)
      - name: Prepare file lists
        id: targets
        if:  steps.check_draft.outputs.is_draft != 'true' && steps.changed.outputs.any_changed == 'false'
        shell: bash
        run: |
          args=""
          # Consume the newline-delimited list from the previous step's output
          while IFS= read -r file; do
            args+=" --target "$(printf %q "$file")
          done <<< "${{ steps.changed.outputs.files_nl }}"
          echo "args=${args}" >> "$GITHUB_OUTPUT"
      # PREREQUISITES - Only needed if the runner doesn't already satisfy these requirements.
      - name: Ensure node v20.9.0 or greater
        if:  steps.check_draft.outputs.is_draft != 'true' && steps.changed.outputs.any_changed == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '>=20.9.0'
      - name: Ensure java v11 or greater
        if:  steps.check_draft.outputs.is_draft != 'true' && steps.changed.outputs.any_changed == 'false'
        uses: actions/setup-java@v4
        with:
          java-version: '>=11'
          distribution: 'zulu'
      - name: Ensure python v3.10 or greater
        if:  steps.check_draft.outputs.is_draft != 'true' && steps.changed.outputs.any_changed == 'false'
        uses: actions/setup-python@v5
        with:
          python-version: '>=3.10'

      - name: Install Salesforce CLI
        if:  steps.check_draft.outputs.is_draft != 'true' && steps.changed.outputs.any_changed == 'false'
        run: npm install -g @salesforce/cli@latest

      - name: Install Latest Salesforce Code Analyzer CLI Plugin
        if:  steps.check_draft.outputs.is_draft != 'true' && steps.changed.outputs.any_changed == 'false'
        run: sf plugins install code-analyzer@latest

      - name: Run Salesforce Code Analyzer
        if:  steps.check_draft.outputs.is_draft != 'true' && steps.changed.outputs.any_changed == 'false'
        id: run-analyzer
        uses: forcedotcom/run-code-analyzer@v2
        with:
          run-arguments: >-
            --view detail
            --output-file sfca_results.json
            ${{ steps.targets.outputs.args }}
          results-artifact-name: salesforce-code-analyzer-results
          github-token: ${{ github.token }}

      - name: Check the Outputs to Determine Whether to Fail (at least one sev1 or five sev2 violations)
        if: |
          steps.run-analyzer.outputs.exit-code > 0 ||
          steps.run-analyzer.outputs.num-sev1-violations > 0 ||
          steps.run-analyzer.outputs.num-sev2-violations > 0 ||
          steps.run-analyzer.outputs.num-sev3-violations > 5 

        run: |
             CurrentExitCode="${{ steps.run-analyzer.outputs.exit-code }}"
             Sev1Violations="${{ steps.run-analyzer.outputs.num-sev1-violations }}"
             Sev2Violations="${{ steps.run-analyzer.outputs.num-sev2-violations }}"
             Sev3Violations="${{ steps.run-analyzer.outputs.num-sev3-violations }}"
             echo "Failed exitcode: $CurrentExitCode | Violations (critical, high): $Sev1Violations $Sev2Violations $Sev3Violations"

             exit -1
